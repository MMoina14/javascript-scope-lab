{
  "stats": {
    "suites": 6,
    "tests": 13,
    "passes": 10,
    "pending": 0,
    "failures": 3,
    "start": "2025-07-09T01:16:03.444Z",
    "end": "2025-07-09T01:16:03.847Z",
    "duration": 403
  },
  "tests": [
    {
      "title": "is declared using const",
      "fullTitle": "index.js burgers is declared using const",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "is set to the value of an array that has the following 2 elements: 'Hamburger' and 'Cheeseburger'",
      "fullTitle": "index.js burgers is set to the value of an array that has the following 2 elements: 'Hamburger' and 'Cheeseburger'",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "is declared using let",
      "fullTitle": "index.js featuredDrink is declared using let",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "is a string",
      "fullTitle": "index.js featuredDrink is a string",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "is set to the value 'Strawberry Milkshake'",
      "fullTitle": "index.js featuredDrink is set to the value 'Strawberry Milkshake'",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "is a function",
      "fullTitle": "index.js addBurger is a function",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "when called, creates a function-scoped variable named newBurger using the const keyword and assigns it the value 'Flatburger'",
      "fullTitle": "index.js addBurger when called, creates a function-scoped variable named newBurger using the const keyword and assigns it the value 'Flatburger'",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "when called, uses the .push() array method to add newBurger, which has the value of 'Flatburger', to the burgers array",
      "fullTitle": "index.js addBurger when called, uses the .push() array method to add newBurger, which has the value of 'Flatburger', to the burgers array",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "has a condition with the value of true",
      "fullTitle": "index.js if statement has a condition with the value of true",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "message": "Expected the use of an if statement whose condition has the value of true: expected '// Step 1: Variable Data\\r\\n\\r\\nconst burgers = [\\'Hamburger\\', \\'Cheeseburger\\']; // must use const\\r\\nlet featuredDrink = \\'Strawberry Milkshake\\';   // must use let\\r\\n\\r\\n// Step 2: Function and Block\\r\\n\\r\\nfunction addBurger() {\\r\\n  const newBurger = \\'Flatburger\\';  // must use const\\r\\n  burgers.push(newBurger);\\r\\n}\\r\\n\\r\\n// Step 3: Variable Declaration and Scope\\r\\n\\r\\nif (true) {\\r\\n  const anotherNewBurger = \\'Maple Bacon Burger\\';  // must use const with exact casing\\r\\n  burgers.push(anotherNewBurger);\\r\\n\\r\\n  function changeFeaturedDrink() {\\r\\n    featuredDrink = \\'The JavaShake\\';\\r\\n  }\\r\\n}\\r\\n' to match /if\\(true\\)/",
        "showDiff": false,
        "actual": "// Step 1: Variable Data\r\n\r\nconst burgers = ['Hamburger', 'Cheeseburger']; // must use const\r\nlet featuredDrink = 'Strawberry Milkshake';   // must use let\r\n\r\n// Step 2: Function and Block\r\n\r\nfunction addBurger() {\r\n  const newBurger = 'Flatburger';  // must use const\r\n  burgers.push(newBurger);\r\n}\r\n\r\n// Step 3: Variable Declaration and Scope\r\n\r\nif (true) {\r\n  const anotherNewBurger = 'Maple Bacon Burger';  // must use const with exact casing\r\n  burgers.push(anotherNewBurger);\r\n\r\n  function changeFeaturedDrink() {\r\n    featuredDrink = 'The JavaShake';\r\n  }\r\n}\r\n",
        "stack": "AssertionError: Expected the use of an if statement whose condition has the value of true: expected '// Step 1: Variable Data\\r\\n\\r\\nconst burgers = [\\'Hamburger\\', \\'Cheeseburger\\']; // must use const\\r\\nlet featuredDrink = \\'Strawberry Milkshake\\';   // must use let\\r\\n\\r\\n// Step 2: Function and Block\\r\\n\\r\\nfunction addBurger() {\\r\\n  const newBurger = \\'Flatburger\\';  // must use const\\r\\n  burgers.push(newBurger);\\r\\n}\\r\\n\\r\\n// Step 3: Variable Declaration and Scope\\r\\n\\r\\nif (true) {\\r\\n  const anotherNewBurger = \\'Maple Bacon Burger\\';  // must use const with exact casing\\r\\n  burgers.push(anotherNewBurger);\\r\\n\\r\\n  function changeFeaturedDrink() {\\r\\n    featuredDrink = \\'The JavaShake\\';\\r\\n  }\\r\\n}\\r\\n' to match /if\\(true\\)/\n    at Context.<anonymous> (test\\indexTest.js:59:21)\n    at process.processImmediate (node:internal/timers:485:21)"
      }
    },
    {
      "title": "creates a block-scoped variable named anotherNewBurger using the const keyword and assigns it the value 'Maple Bacon Burger'",
      "fullTitle": "index.js if statement creates a block-scoped variable named anotherNewBurger using the const keyword and assigns it the value 'Maple Bacon Burger'",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "message": "Expected anotherNewBurger to be a block-scoped variable that is declared inside of the if statement using const and has the value 'Maple Bacon Burger': expected '// Step 1: Variable Data\\r\\n\\r\\nconst burgers = [\\'Hamburger\\', \\'Cheeseburger\\']; // must use const\\r\\nlet featuredDrink = \\'Strawberry Milkshake\\';   // must use let\\r\\n\\r\\n// Step 2: Function and Block\\r\\n\\r\\nfunction addBurger() {\\r\\n  const newBurger = \\'Flatburger\\';  // must use const\\r\\n  burgers.push(newBurger);\\r\\n}\\r\\n\\r\\n// Step 3: Variable Declaration and Scope\\r\\n\\r\\nif (true) {\\r\\n  const anotherNewBurger = \\'Maple Bacon Burger\\';  // must use const with exact casing\\r\\n  burgers.push(anotherNewBurger);\\r\\n\\r\\n  function changeFeaturedDrink() {\\r\\n    featuredDrink = \\'The JavaShake\\';\\r\\n  }\\r\\n}\\r\\n' to match /if\\(true\\)[ \\n]*\\{(.|\\n)*const[ \\n]+anotherNewBurger[ \\n]*=[ \\n]*['\"`]Maple Bacon Burger['\"`](.|\\n)*\\}/",
        "showDiff": false,
        "actual": "// Step 1: Variable Data\r\n\r\nconst burgers = ['Hamburger', 'Cheeseburger']; // must use const\r\nlet featuredDrink = 'Strawberry Milkshake';   // must use let\r\n\r\n// Step 2: Function and Block\r\n\r\nfunction addBurger() {\r\n  const newBurger = 'Flatburger';  // must use const\r\n  burgers.push(newBurger);\r\n}\r\n\r\n// Step 3: Variable Declaration and Scope\r\n\r\nif (true) {\r\n  const anotherNewBurger = 'Maple Bacon Burger';  // must use const with exact casing\r\n  burgers.push(anotherNewBurger);\r\n\r\n  function changeFeaturedDrink() {\r\n    featuredDrink = 'The JavaShake';\r\n  }\r\n}\r\n",
        "stack": "AssertionError: Expected anotherNewBurger to be a block-scoped variable that is declared inside of the if statement using const and has the value 'Maple Bacon Burger': expected '// Step 1: Variable Data\\r\\n\\r\\nconst burgers = [\\'Hamburger\\', \\'Cheeseburger\\']; // must use const\\r\\nlet featuredDrink = \\'Strawberry Milkshake\\';   // must use let\\r\\n\\r\\n// Step 2: Function and Block\\r\\n\\r\\nfunction addBurger() {\\r\\n  const newBurger = \\'Flatburger\\';  // must use const\\r\\n  burgers.push(newBurger);\\r\\n}\\r\\n\\r\\n// Step 3: Variable Declaration and Scope\\r\\n\\r\\nif (true) {\\r\\n  const anotherNewBurger = \\'Maple Bacon Burger\\';  // must use const with exact casing\\r\\n  burgers.push(anotherNewBurger);\\r\\n\\r\\n  function changeFeaturedDrink() {\\r\\n    featuredDrink = \\'The JavaShake\\';\\r\\n  }\\r\\n}\\r\\n' to match /if\\(true\\)[ \\n]*\\{(.|\\n)*const[ \\n]+anotherNewBurger[ \\n]*=[ \\n]*['\"`]Maple Bacon Burger['\"`](.|\\n)*\\}/\n    at Context.<anonymous> (test\\indexTest.js:63:21)\n    at process.processImmediate (node:internal/timers:485:21)"
      }
    },
    {
      "title": "uses the .push() array method to add anotherNewBurger, which has the value of 'Maple Bacon Burger', to the burgers array",
      "fullTitle": "index.js if statement uses the .push() array method to add anotherNewBurger, which has the value of 'Maple Bacon Burger', to the burgers array",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "Expected the use of the .push() array method, inside of the if statement, to add anotherNewBurger, which has the value of 'Maple Bacon Burger', to the burgers array: expected '// Step 1: Variable Data\\r\\n\\r\\nconst burgers = [\\'Hamburger\\', \\'Cheeseburger\\']; // must use const\\r\\nlet featuredDrink = \\'Strawberry Milkshake\\';   // must use let\\r\\n\\r\\n// Step 2: Function and Block\\r\\n\\r\\nfunction addBurger() {\\r\\n  const newBurger = \\'Flatburger\\';  // must use const\\r\\n  burgers.push(newBurger);\\r\\n}\\r\\n\\r\\n// Step 3: Variable Declaration and Scope\\r\\n\\r\\nif (true) {\\r\\n  const anotherNewBurger = \\'Maple Bacon Burger\\';  // must use const with exact casing\\r\\n  burgers.push(anotherNewBurger);\\r\\n\\r\\n  function changeFeaturedDrink() {\\r\\n    featuredDrink = \\'The JavaShake\\';\\r\\n  }\\r\\n}\\r\\n' to match /if\\(true\\)[ \\n]*\\{(.|\\n)*.push\\((.|\\n)+\\)(.|\\n)*\\}/",
        "showDiff": false,
        "actual": "// Step 1: Variable Data\r\n\r\nconst burgers = ['Hamburger', 'Cheeseburger']; // must use const\r\nlet featuredDrink = 'Strawberry Milkshake';   // must use let\r\n\r\n// Step 2: Function and Block\r\n\r\nfunction addBurger() {\r\n  const newBurger = 'Flatburger';  // must use const\r\n  burgers.push(newBurger);\r\n}\r\n\r\n// Step 3: Variable Declaration and Scope\r\n\r\nif (true) {\r\n  const anotherNewBurger = 'Maple Bacon Burger';  // must use const with exact casing\r\n  burgers.push(anotherNewBurger);\r\n\r\n  function changeFeaturedDrink() {\r\n    featuredDrink = 'The JavaShake';\r\n  }\r\n}\r\n",
        "stack": "AssertionError: Expected the use of the .push() array method, inside of the if statement, to add anotherNewBurger, which has the value of 'Maple Bacon Burger', to the burgers array: expected '// Step 1: Variable Data\\r\\n\\r\\nconst burgers = [\\'Hamburger\\', \\'Cheeseburger\\']; // must use const\\r\\nlet featuredDrink = \\'Strawberry Milkshake\\';   // must use let\\r\\n\\r\\n// Step 2: Function and Block\\r\\n\\r\\nfunction addBurger() {\\r\\n  const newBurger = \\'Flatburger\\';  // must use const\\r\\n  burgers.push(newBurger);\\r\\n}\\r\\n\\r\\n// Step 3: Variable Declaration and Scope\\r\\n\\r\\nif (true) {\\r\\n  const anotherNewBurger = \\'Maple Bacon Burger\\';  // must use const with exact casing\\r\\n  burgers.push(anotherNewBurger);\\r\\n\\r\\n  function changeFeaturedDrink() {\\r\\n    featuredDrink = \\'The JavaShake\\';\\r\\n  }\\r\\n}\\r\\n' to match /if\\(true\\)[ \\n]*\\{(.|\\n)*.push\\((.|\\n)+\\)(.|\\n)*\\}/\n    at Context.<anonymous> (test\\indexTest.js:68:21)\n    at process.processImmediate (node:internal/timers:485:21)"
      }
    },
    {
      "title": "is a function",
      "fullTitle": "index.js changeFeaturedDrink is a function",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "when called, changes the value of the featuredDrink variable to 'The JavaShake'",
      "fullTitle": "index.js changeFeaturedDrink when called, changes the value of the featuredDrink variable to 'The JavaShake'",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    }
  ],
  "pending": [],
  "failures": [
    {
      "title": "has a condition with the value of true",
      "fullTitle": "index.js if statement has a condition with the value of true",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "message": "Expected the use of an if statement whose condition has the value of true: expected '// Step 1: Variable Data\\r\\n\\r\\nconst burgers = [\\'Hamburger\\', \\'Cheeseburger\\']; // must use const\\r\\nlet featuredDrink = \\'Strawberry Milkshake\\';   // must use let\\r\\n\\r\\n// Step 2: Function and Block\\r\\n\\r\\nfunction addBurger() {\\r\\n  const newBurger = \\'Flatburger\\';  // must use const\\r\\n  burgers.push(newBurger);\\r\\n}\\r\\n\\r\\n// Step 3: Variable Declaration and Scope\\r\\n\\r\\nif (true) {\\r\\n  const anotherNewBurger = \\'Maple Bacon Burger\\';  // must use const with exact casing\\r\\n  burgers.push(anotherNewBurger);\\r\\n\\r\\n  function changeFeaturedDrink() {\\r\\n    featuredDrink = \\'The JavaShake\\';\\r\\n  }\\r\\n}\\r\\n' to match /if\\(true\\)/",
        "showDiff": false,
        "actual": "// Step 1: Variable Data\r\n\r\nconst burgers = ['Hamburger', 'Cheeseburger']; // must use const\r\nlet featuredDrink = 'Strawberry Milkshake';   // must use let\r\n\r\n// Step 2: Function and Block\r\n\r\nfunction addBurger() {\r\n  const newBurger = 'Flatburger';  // must use const\r\n  burgers.push(newBurger);\r\n}\r\n\r\n// Step 3: Variable Declaration and Scope\r\n\r\nif (true) {\r\n  const anotherNewBurger = 'Maple Bacon Burger';  // must use const with exact casing\r\n  burgers.push(anotherNewBurger);\r\n\r\n  function changeFeaturedDrink() {\r\n    featuredDrink = 'The JavaShake';\r\n  }\r\n}\r\n",
        "stack": "AssertionError: Expected the use of an if statement whose condition has the value of true: expected '// Step 1: Variable Data\\r\\n\\r\\nconst burgers = [\\'Hamburger\\', \\'Cheeseburger\\']; // must use const\\r\\nlet featuredDrink = \\'Strawberry Milkshake\\';   // must use let\\r\\n\\r\\n// Step 2: Function and Block\\r\\n\\r\\nfunction addBurger() {\\r\\n  const newBurger = \\'Flatburger\\';  // must use const\\r\\n  burgers.push(newBurger);\\r\\n}\\r\\n\\r\\n// Step 3: Variable Declaration and Scope\\r\\n\\r\\nif (true) {\\r\\n  const anotherNewBurger = \\'Maple Bacon Burger\\';  // must use const with exact casing\\r\\n  burgers.push(anotherNewBurger);\\r\\n\\r\\n  function changeFeaturedDrink() {\\r\\n    featuredDrink = \\'The JavaShake\\';\\r\\n  }\\r\\n}\\r\\n' to match /if\\(true\\)/\n    at Context.<anonymous> (test\\indexTest.js:59:21)\n    at process.processImmediate (node:internal/timers:485:21)"
      }
    },
    {
      "title": "creates a block-scoped variable named anotherNewBurger using the const keyword and assigns it the value 'Maple Bacon Burger'",
      "fullTitle": "index.js if statement creates a block-scoped variable named anotherNewBurger using the const keyword and assigns it the value 'Maple Bacon Burger'",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "message": "Expected anotherNewBurger to be a block-scoped variable that is declared inside of the if statement using const and has the value 'Maple Bacon Burger': expected '// Step 1: Variable Data\\r\\n\\r\\nconst burgers = [\\'Hamburger\\', \\'Cheeseburger\\']; // must use const\\r\\nlet featuredDrink = \\'Strawberry Milkshake\\';   // must use let\\r\\n\\r\\n// Step 2: Function and Block\\r\\n\\r\\nfunction addBurger() {\\r\\n  const newBurger = \\'Flatburger\\';  // must use const\\r\\n  burgers.push(newBurger);\\r\\n}\\r\\n\\r\\n// Step 3: Variable Declaration and Scope\\r\\n\\r\\nif (true) {\\r\\n  const anotherNewBurger = \\'Maple Bacon Burger\\';  // must use const with exact casing\\r\\n  burgers.push(anotherNewBurger);\\r\\n\\r\\n  function changeFeaturedDrink() {\\r\\n    featuredDrink = \\'The JavaShake\\';\\r\\n  }\\r\\n}\\r\\n' to match /if\\(true\\)[ \\n]*\\{(.|\\n)*const[ \\n]+anotherNewBurger[ \\n]*=[ \\n]*['\"`]Maple Bacon Burger['\"`](.|\\n)*\\}/",
        "showDiff": false,
        "actual": "// Step 1: Variable Data\r\n\r\nconst burgers = ['Hamburger', 'Cheeseburger']; // must use const\r\nlet featuredDrink = 'Strawberry Milkshake';   // must use let\r\n\r\n// Step 2: Function and Block\r\n\r\nfunction addBurger() {\r\n  const newBurger = 'Flatburger';  // must use const\r\n  burgers.push(newBurger);\r\n}\r\n\r\n// Step 3: Variable Declaration and Scope\r\n\r\nif (true) {\r\n  const anotherNewBurger = 'Maple Bacon Burger';  // must use const with exact casing\r\n  burgers.push(anotherNewBurger);\r\n\r\n  function changeFeaturedDrink() {\r\n    featuredDrink = 'The JavaShake';\r\n  }\r\n}\r\n",
        "stack": "AssertionError: Expected anotherNewBurger to be a block-scoped variable that is declared inside of the if statement using const and has the value 'Maple Bacon Burger': expected '// Step 1: Variable Data\\r\\n\\r\\nconst burgers = [\\'Hamburger\\', \\'Cheeseburger\\']; // must use const\\r\\nlet featuredDrink = \\'Strawberry Milkshake\\';   // must use let\\r\\n\\r\\n// Step 2: Function and Block\\r\\n\\r\\nfunction addBurger() {\\r\\n  const newBurger = \\'Flatburger\\';  // must use const\\r\\n  burgers.push(newBurger);\\r\\n}\\r\\n\\r\\n// Step 3: Variable Declaration and Scope\\r\\n\\r\\nif (true) {\\r\\n  const anotherNewBurger = \\'Maple Bacon Burger\\';  // must use const with exact casing\\r\\n  burgers.push(anotherNewBurger);\\r\\n\\r\\n  function changeFeaturedDrink() {\\r\\n    featuredDrink = \\'The JavaShake\\';\\r\\n  }\\r\\n}\\r\\n' to match /if\\(true\\)[ \\n]*\\{(.|\\n)*const[ \\n]+anotherNewBurger[ \\n]*=[ \\n]*['\"`]Maple Bacon Burger['\"`](.|\\n)*\\}/\n    at Context.<anonymous> (test\\indexTest.js:63:21)\n    at process.processImmediate (node:internal/timers:485:21)"
      }
    },
    {
      "title": "uses the .push() array method to add anotherNewBurger, which has the value of 'Maple Bacon Burger', to the burgers array",
      "fullTitle": "index.js if statement uses the .push() array method to add anotherNewBurger, which has the value of 'Maple Bacon Burger', to the burgers array",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "Expected the use of the .push() array method, inside of the if statement, to add anotherNewBurger, which has the value of 'Maple Bacon Burger', to the burgers array: expected '// Step 1: Variable Data\\r\\n\\r\\nconst burgers = [\\'Hamburger\\', \\'Cheeseburger\\']; // must use const\\r\\nlet featuredDrink = \\'Strawberry Milkshake\\';   // must use let\\r\\n\\r\\n// Step 2: Function and Block\\r\\n\\r\\nfunction addBurger() {\\r\\n  const newBurger = \\'Flatburger\\';  // must use const\\r\\n  burgers.push(newBurger);\\r\\n}\\r\\n\\r\\n// Step 3: Variable Declaration and Scope\\r\\n\\r\\nif (true) {\\r\\n  const anotherNewBurger = \\'Maple Bacon Burger\\';  // must use const with exact casing\\r\\n  burgers.push(anotherNewBurger);\\r\\n\\r\\n  function changeFeaturedDrink() {\\r\\n    featuredDrink = \\'The JavaShake\\';\\r\\n  }\\r\\n}\\r\\n' to match /if\\(true\\)[ \\n]*\\{(.|\\n)*.push\\((.|\\n)+\\)(.|\\n)*\\}/",
        "showDiff": false,
        "actual": "// Step 1: Variable Data\r\n\r\nconst burgers = ['Hamburger', 'Cheeseburger']; // must use const\r\nlet featuredDrink = 'Strawberry Milkshake';   // must use let\r\n\r\n// Step 2: Function and Block\r\n\r\nfunction addBurger() {\r\n  const newBurger = 'Flatburger';  // must use const\r\n  burgers.push(newBurger);\r\n}\r\n\r\n// Step 3: Variable Declaration and Scope\r\n\r\nif (true) {\r\n  const anotherNewBurger = 'Maple Bacon Burger';  // must use const with exact casing\r\n  burgers.push(anotherNewBurger);\r\n\r\n  function changeFeaturedDrink() {\r\n    featuredDrink = 'The JavaShake';\r\n  }\r\n}\r\n",
        "stack": "AssertionError: Expected the use of the .push() array method, inside of the if statement, to add anotherNewBurger, which has the value of 'Maple Bacon Burger', to the burgers array: expected '// Step 1: Variable Data\\r\\n\\r\\nconst burgers = [\\'Hamburger\\', \\'Cheeseburger\\']; // must use const\\r\\nlet featuredDrink = \\'Strawberry Milkshake\\';   // must use let\\r\\n\\r\\n// Step 2: Function and Block\\r\\n\\r\\nfunction addBurger() {\\r\\n  const newBurger = \\'Flatburger\\';  // must use const\\r\\n  burgers.push(newBurger);\\r\\n}\\r\\n\\r\\n// Step 3: Variable Declaration and Scope\\r\\n\\r\\nif (true) {\\r\\n  const anotherNewBurger = \\'Maple Bacon Burger\\';  // must use const with exact casing\\r\\n  burgers.push(anotherNewBurger);\\r\\n\\r\\n  function changeFeaturedDrink() {\\r\\n    featuredDrink = \\'The JavaShake\\';\\r\\n  }\\r\\n}\\r\\n' to match /if\\(true\\)[ \\n]*\\{(.|\\n)*.push\\((.|\\n)+\\)(.|\\n)*\\}/\n    at Context.<anonymous> (test\\indexTest.js:68:21)\n    at process.processImmediate (node:internal/timers:485:21)"
      }
    }
  ],
  "passes": [
    {
      "title": "is declared using const",
      "fullTitle": "index.js burgers is declared using const",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "is set to the value of an array that has the following 2 elements: 'Hamburger' and 'Cheeseburger'",
      "fullTitle": "index.js burgers is set to the value of an array that has the following 2 elements: 'Hamburger' and 'Cheeseburger'",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "is declared using let",
      "fullTitle": "index.js featuredDrink is declared using let",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "is a string",
      "fullTitle": "index.js featuredDrink is a string",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "is set to the value 'Strawberry Milkshake'",
      "fullTitle": "index.js featuredDrink is set to the value 'Strawberry Milkshake'",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "is a function",
      "fullTitle": "index.js addBurger is a function",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "when called, creates a function-scoped variable named newBurger using the const keyword and assigns it the value 'Flatburger'",
      "fullTitle": "index.js addBurger when called, creates a function-scoped variable named newBurger using the const keyword and assigns it the value 'Flatburger'",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "when called, uses the .push() array method to add newBurger, which has the value of 'Flatburger', to the burgers array",
      "fullTitle": "index.js addBurger when called, uses the .push() array method to add newBurger, which has the value of 'Flatburger', to the burgers array",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "is a function",
      "fullTitle": "index.js changeFeaturedDrink is a function",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "when called, changes the value of the featuredDrink variable to 'The JavaShake'",
      "fullTitle": "index.js changeFeaturedDrink when called, changes the value of the featuredDrink variable to 'The JavaShake'",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    }
  ]
}